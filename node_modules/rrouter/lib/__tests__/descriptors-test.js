/**
 * @jsx React.DOM
 */
'use strict';

var assert = require('assert');
var descriptors = require('../descriptors');
var Routes = descriptors.Routes;
var Route = descriptors.Route;

describe('Route', function() {

  describe('creating routes', function() {

    it('creates routes from arguments', function() {
      var routes = (
        Routes(null, 
          Route({name: "a"}), 
          Route({name: "b"})
        )
      );
      assert.equal(routes.children.length, 2);
    });

    it('creates routes from an array', function() {
      var subroutes = [
        Route({name: "a"}),
        Route({name: "b"})
      ];
      var routes = Routes(null, subroutes);
      assert.equal(routes.children.length, 2);
    });

    it('creates routes with RegExp', function() {
      var routes = (
        Routes(null, 
          Route({path: /a/})
        )
      );
      assert(routes.children[0].path instanceof RegExp);
    });

  });

  describe('getTraceByName()', function() {

    var routes = (
      Routes(null, 
        Route({name: "a"}), 
        Route({name: "b"}, 
          Route({name: "c"})
        ), 
        Route(null, 
          Route({name: "d"})
        ), 
        Route({name: "e"}, 
          Route(null, 
            Route({name: "f"})
          )
        )
      )
    );

    it('retrieves a route by its name', function() {
      assert.deepEqual(
        descriptors.getTraceByName(routes, 'a'),
        [
          routes,
          routes.children[0]
        ]);
      assert.deepEqual(
        descriptors.getTraceByName(routes, 'b'),
        [
          routes,
          routes.children[1]
        ]);
      assert.deepEqual(
        descriptors.getTraceByName(routes, 'b/c'),
        [
          routes,
          routes.children[1],
          routes.children[1].children[0]
        ]);
      assert.deepEqual(
        descriptors.getTraceByName(routes, 'd'),
        [
          routes,
          routes.children[2],
          routes.children[2].children[0]
        ]);
      assert.deepEqual(
        descriptors.getTraceByName(routes, 'e/f'),
        [
          routes,
          routes.children[3],
          routes.children[3].children[0],
          routes.children[3].children[0].children[0]
        ]);
    });

  });
});
